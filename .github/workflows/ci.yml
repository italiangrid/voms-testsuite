name: Build images, deploy and run testsuite

on:
  push

jobs:

  build-and-push-testsuite:
    name: Build & Push testsuite

    strategy:
      matrix:
        rhel: [7, 9]
        repo: [stable, beta]
        exclude:
          - rhel: 7
            repo: beta

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push image
        uses: docker/build-push-action@v5
        with:
          context: docker/testsuite
          file: ./docker/testsuite/Dockerfile.centos${{ matrix.rhel }}
          push: true
          tags: italiangrid/voms-testsuite:centos${{ matrix.rhel }}-${{ matrix.repo }}
          build-args: |
            VOMS_REPO=${{ matrix.repo }}
            RHEL_VERSION=${{ matrix.rhel }}

  build-and-push-voms:
    name: Build & Push VOMS core

    strategy:
      matrix:
        rhel: [7, 9]
        repo: [stable, beta]
        exclude:
          - rhel: 7
            repo: beta

    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push image
        uses: docker/build-push-action@v5
        with:
          context: docker/voms
          file: ./docker/voms/Dockerfile.centos${{ matrix.rhel }}
          push: true
          tags: italiangrid/voms:centos${{ matrix.rhel }}-${{ matrix.repo }}
          build-args: |
            VOMS_REPO=${{ matrix.repo }}
            RHEL_VERSION=${{ matrix.rhel }}

  run-testsuite-vomsadmin:
    name: VOMS Admin ${{ matrix.server }}, ${{ matrix.client_lang }} client ${{ matrix.client }}

    strategy:
      matrix:
        client: [7-stable, 9-beta]
        server: [7-stable, 9-beta]
        client_lang: [cpp, java]

    runs-on: ubuntu-latest
    continue-on-error: true

    needs: [build-and-push-testsuite, build-and-push-voms]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Provide trustanchors
      run: |
        docker compose --file docker-compose.ci.yml build --no-cache trust
        docker compose --file docker-compose.ci.yml up --detach trust
      working-directory: compose

    - name: Start compose
      run: docker compose --file docker-compose.ci.yml up --detach db voms testsuite
      working-directory: compose
      env:
        TS_IMAGE: italiangrid/voms-testsuite:centos${{ matrix.client }}
        VOMS_IMAGE: italiangrid/voms:centos${{ matrix.server }}

    - name: Deploy db and voms
      run: |
        docker compose --file docker-compose.ci.yml exec -T --workdir /scripts db bash /scripts/populate-db.sh
        docker compose --file docker-compose.ci.yml exec -T --workdir /scripts voms bash /scripts/setup-and-start-voms.sh
      working-directory: compose

    - name: Create artifacts dir
      if: ${{ always() }}
      run: |
        ARTIFACTS_PATH=${HOME}/artifacts
        echo ARTIFACTS_PATH: ${ARTIFACTS_PATH}
        echo "ARTIFACTS_PATH=${ARTIFACTS_PATH}" >> ${GITHUB_ENV}
        mkdir -p ${ARTIFACTS_PATH}/logs

    - name: Enable legacy OpenSSL crypto policies on EL9
      if: matrix.client == '9-beta'
      run: docker compose --file docker-compose.ci.yml exec -T testsuite bash -c "sudo update-crypto-policies --set LEGACY"
      working-directory: compose

    - name: Run testsuite for java clients
      if: matrix.client_lang == 'java'
      run: docker compose --file docker-compose.ci.yml exec -T testsuite bash /scripts/ci-run-testsuite.sh
      working-directory: compose
      continue-on-error: true

    - name: Collect test report for java clients
      if: matrix.client_lang == 'java'
      run: |
        docker compose --file docker-compose.ci.yml cp testsuite:/tmp/reports ${ARTIFACTS_PATH}/
        docker compose --file docker-compose.ci.yml exec -T testsuite rm -rf /tmp/reports
      working-directory: compose

    - name: Run testsuite for cpp clients
      if: matrix.client_lang == 'cpp'
      run: |
        docker compose --file docker-compose.ci.yml exec -T -u root testsuite bash -c "update-alternatives --set voms-proxy-init /usr/bin/voms-proxy-init2; update-alternatives --set voms-proxy-info /usr/bin/voms-proxy-info2; update-alternatives --set voms-proxy-destroy /usr/bin/voms-proxy-destroy2"
        docker compose --file docker-compose.ci.yml exec -T testsuite bash /scripts/ci-run-testsuite.sh --variable client_version:2 --include legacy
      working-directory: compose
      continue-on-error: true

    - name: Collect test report for cpp clients
      if: matrix.client_lang == 'cpp'
      run: docker compose --file docker-compose.ci.yml cp testsuite:/tmp/reports ${ARTIFACTS_PATH}/
      working-directory: compose

    - name: Collect summary report
      if: ${{ always() }}
      run: |
        result=$(cat ${ARTIFACTS_PATH}/reports/report.html | grep '^window.output\["stats"\]' | sed -e 's/window.output\["stats"\] = //' -e 's/;$//')          
        
        passed_tests=$(echo "${result}" | jq .[0][0].pass)
        failed_tests=$(echo "${result}" | jq .[0][0].fail)
        if [[ "${{ matrix.client_lang }}" == 'cpp' ]]; then
          client_version=$(docker compose --file docker-compose.ci.yml exec -T testsuite bash -c "voms-proxy-init2 -version " | grep '^Version:' | awk '{print $2}')
        else
          client_version=$(docker compose --file docker-compose.ci.yml exec -T testsuite bash -c "voms-proxy-init3 -version" | awk '{print $3}')
        fi

        result_json="{\"passed_tests\":${passed_tests},\"failed_tests\":${failed_tests},\"client_version\":\"${client_version}\",\"client\":\"${{ matrix.client }}\",\"server\":\"${{ matrix.server }}\"}"
        echo "$result_json" > ${ARTIFACTS_PATH}/result_${{ matrix.client_lang }}_${{ matrix.client }}_${{ matrix.server }}.json
      working-directory: compose

    - name: Collect logs
      if: ${{ always() }}
      run: |
        docker compose --file docker-compose.ci.yml logs --no-color testsuite > ${ARTIFACTS_PATH}/logs/testsuite.log
        docker compose --file docker-compose.ci.yml logs --no-color voms > ${ARTIFACTS_PATH}/logs/voms.log
      working-directory: compose

    - name: Stop compose
      if: ${{ always() }}
      run: docker compose --file docker-compose.ci.yml down --volumes
      working-directory: compose

    - name: Upload artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.client_lang}}_${{ matrix.client}}_${{ matrix.server }}
        path: ${{ env.ARTIFACTS_PATH }}

  publish-results:
    runs-on: ubuntu-latest
    needs: [run-testsuite-vomsadmin]
    steps:
      - name: Download all results
        uses: actions/download-artifact@v4
        with:
          path: results

      - name: Generate summary
        run: |
          ARTIFACTS_PATH=results

          declare -A results client_ver
          for file in ${ARTIFACTS_PATH}/**/result_*.json; do
            base=$(basename $file)
            no_ext=${base%.json}
            no_prefix=${no_ext#result_}
            IFS='_' read -r language client_version server_version <<< "$no_prefix"

            json=$(cat "$file")
            key="${language}_${client_version}_${server_version}"

            results[$key]=":white_check_mark: Passed $(jq -r .passed_tests <<< "$json") :x: Failed $(jq -r .failed_tests <<< "$json")"
            client_ver[$key]="$(jq -r .client_version <<< "$json")"
          done

          echo "# Test report" >> $GITHUB_STEP_SUMMARY
          echo "|                          | VOMS Admin stable (EL 7) | VOMS Admin beta (EL 9) |" >> $GITHUB_STEP_SUMMARY
          echo "| ------------------------ | -------------- | ------------ |" >> $GITHUB_STEP_SUMMARY

          print_results() {
            lang=$1
            client=$2
            IFS='-' read -r el repo <<< "$client"
            echo "| __VOMS clients ${lang} ${repo} ${client_ver[${lang}_${client}_7-stable]} (EL ${el})__ | ${results[${lang}_${client}_7-stable]} | ${results[${lang}_${client}_9-beta]} |" >> $GITHUB_STEP_SUMMARY
          }

          print_results cpp 7-stable
          print_results java 7-stable
          print_results cpp 9-beta
          print_results java 9-beta
        shell: bash
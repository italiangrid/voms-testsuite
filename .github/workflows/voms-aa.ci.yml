name: Run testsuite

on: push

env:
  server_beta: v1.12.0.rc3
  server_stable: v1.11.0
  client_beta: 9-beta
  client_stable: 7-stable

jobs:
  run_testsuite_vomsaa:
    name: VOMS AA ${{ env[matrix.server] }}, ${{ matrix.client_lang }} client ${{ env[matrix.client] }}

    strategy:
      matrix:
        server: [server_beta, server_stable]
        client: [client_beta, client_stable]
        client_lang: [cpp, java]

    runs-on: ubuntu-latest

    continue-on-error: true

    env:
      ROBOT_OPTIONS: --variable vo1:vo.2 --variable vo1_host:voms-aa.test.example --variable vo1_issuer:'/C=IT/O=IGI/CN=voms-aa.test.example' --variable vo2:vo.1 --variable vo2_host:voms.test.example --variable vo2_issuer:'/C=IT/O=IGI/CN=voms.test.example' --exclude issue-723 --exclude issue-724 --exclude issue-726

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start compose
        run: |
          docker compose --file docker-compose.ci.yml build --no-cache trust
          docker compose --file docker-compose.ci.yml up --detach trust db voms testsuite vomsaa ngx
        working-directory: compose
        env:
          TS_IMAGE: italiangrid/voms-testsuite:centos${{ env[matrix.client] }}
          VOMS_IMAGE: italiangrid/voms:centos7-stable
          VOMS_AA_IMAGE_TAG: ${{ env[matrix.server] }}

      - name: Deploy db and voms
        run: |
          docker compose --file docker-compose.ci.yml exec -T --workdir /scripts db bash /scripts/populate-db.sh
          docker compose --file docker-compose.ci.yml exec -T --workdir /scripts voms bash /scripts/setup-and-start-voms.sh
        working-directory: compose

      - name: Create artifacts dir
        if: ${{ always() }}
        run: |
          ARTIFACTS_PATH=${HOME}/artifacts
          echo ARTIFACTS_PATH: ${ARTIFACTS_PATH}
          echo "ARTIFACTS_PATH=${ARTIFACTS_PATH}" >> ${GITHUB_ENV}
          mkdir -p ${ARTIFACTS_PATH}/logs

      - name: Enable legacy OpenSSL crypto policies on EL9
        if: matrix.client == 'client_beta'
        run: docker compose --file docker-compose.ci.yml exec -T testsuite bash -c "sudo update-crypto-policies --set LEGACY"
        working-directory: compose

      - name: Run testsuite for java clients
        if: matrix.client_lang == 'java'
        run: docker compose --file docker-compose.ci.yml exec -T -e ROBOT_OPTIONS="${ROBOT_OPTIONS}" testsuite bash /scripts/ci-run-testsuite.sh
        working-directory: compose
        continue-on-error: true

      - name: Collect test report for java clients
        if: matrix.client_lang == 'java'
        run: docker compose --file docker-compose.ci.yml cp testsuite:/tmp/reports ${ARTIFACTS_PATH}/
        working-directory: compose

      - name: Run testsuite for cpp clients
        if: matrix.client_lang == 'cpp'
        run: |
          docker compose --file docker-compose.ci.yml exec -T -u root testsuite bash -c "update-alternatives --set voms-proxy-init /usr/bin/voms-proxy-init2; update-alternatives --set voms-proxy-info /usr/bin/voms-proxy-info2; update-alternatives --set voms-proxy-destroy /usr/bin/voms-proxy-destroy2"
          docker compose --file docker-compose.ci.yml exec -T -e ROBOT_OPTIONS="${ROBOT_OPTIONS}" testsuite bash /scripts/ci-run-testsuite.sh --variable client_version:2 --include legacy
        working-directory: compose
        continue-on-error: true

      - name: Collect test report for cpp clients
        if: matrix.client_lang == 'cpp'
        run: docker compose --file docker-compose.ci.yml cp testsuite:/tmp/reports ${ARTIFACTS_PATH}/
        working-directory: compose

      - name: Collect summary report
        if: ${{ always() }}
        run: |
          result=$(cat ${ARTIFACTS_PATH}/**/reports/report.html | grep '^window.output\["stats"\]' | sed -e 's/window.output\["stats"\] = //' -e 's/;$//')          
          
          passed_tests=$(echo "${result}" | jq .[0][0].pass)
          failed_tests=$(echo "${result}" | jq .[0][0].fail)
          if [[ "${{ matrix.client_lang }}" == 'cpp' ]]; then
            client_version=$(docker compose --file docker-compose.ci.yml exec -T testsuite bash -c "voms-proxy-init2 -version " | grep '^Version:' | awk '{print $2}')
          else
            client_version=$(docker compose --file docker-compose.ci.yml exec -T testsuite bash -c "voms-proxy-init3 -version" | awk '{print $3}')
          fi
          server_version="${{ env[matrix.server] }}"

          result_json="{\"passed_tests\":${passed_tests},\"failed_tests\":${failed_tests},\"client_version\":\"${client_version}\",\"vomsaa_version\":\"${server_version}\"}"
          echo "$result_json" > ${ARTIFACTS_PATH}/result-${{ matrix.client_lang }}-${{ matrix.client }}-${{ matrix.server }}.json
        working-directory: compose

      - name: Collect logs
        if: ${{ always() }}
        run: |
          docker compose --file docker-compose.ci.yml logs --no-color testsuite > ${ARTIFACTS_PATH}/logs/testsuite.log
          docker compose --file docker-compose.ci.yml logs --no-color vomsaa > ${ARTIFACTS_PATH}/logs/voms.log
        working-directory: compose

      - name: Stop compose
        if: ${{ always() }}
        run: docker compose --file docker-compose.ci.yml down --volumes
        working-directory: compose

      - name: Upload artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.client_lang }}_${{ matrix.client }}_${{ matrix.server }}
          path: ${{ env.ARTIFACTS_PATH }}

  publish-results:
    runs-on: ubuntu-latest
    needs: [run_testsuite_vomsaa]
    steps:
      - name: Download all results
        uses: actions/download-artifact@v4
        with:
          path: results

      - name: Generate summary
        run: |
          ARTIFACTS_PATH=results

          declare -A results client_ver vomsaa_ver
          for file in ${ARTIFACTS_PATH}/**/result-*.json; do
            base=$(basename $file)
            no_ext=${base%.json}
            no_prefix=${no_ext#result-}
            IFS='-' read -r language client_version server_version <<< "$no_prefix"

            json=$(cat "$file")
            key="${language}_${client_version}_${server_version}"

            results[$key]=":white_check_mark: Passed $(jq -r .passed_tests <<< "$json") :x: Failed $(jq -r .failed_tests <<< "$json")"
            client_ver[$key]="$(jq -r .client_version <<< "$json")"
            vomsaa_ver[$key]="$(jq -r .vomsaa_version <<< "$json")"
          done

          echo "# Test report" >> $GITHUB_STEP_SUMMARY
          echo "|                          | VOMS AA stable (${vomsaa_ver[cpp_client_stable_server_stable]}) | VOMS AA beta (${vomsaa_ver[cpp_client_stable_server_beta]}) |" >> $GITHUB_STEP_SUMMARY
          echo "| ------------------------ | -------------- | ------------ |" >> $GITHUB_STEP_SUMMARY

          print_results() {
            lang=$1
            client=$2
            version=${client#client_}
            echo "| __VOMS clients ${lang} ${version} (${client_ver[${lang}_${client}_server_stable]})__ | ${results[${lang}_${client}_server_stable]} | ${results[${lang}_${client}_server_beta]} |" >> $GITHUB_STEP_SUMMARY
          }

          print_results cpp client_stable
          print_results java client_stable
          print_results cpp client_beta
          print_results java client_beta
        shell: bash
